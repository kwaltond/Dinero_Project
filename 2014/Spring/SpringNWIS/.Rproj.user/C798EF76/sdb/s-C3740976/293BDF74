{
    "contents" : "annualreport <- function()\n{\n  library(USGSwsQW)\n  library(scales)\n  library(ggplot2)\n  library(grid)\n  library(extrafont)\n  library(jpeg)\n  library(stringr)\n  library(gWidgets)\n  library(gWidgetsRGtk2)\n  library(RGtk2)\n  loadfonts(device=\"pdf\")\n  img <- readJPEG(\"logo2.jpg\")\n  logo <- rasterGrob(img)\n  EPAstds <- read.csv(\"EPAstds.csv\",header=TRUE)\n  \n  theme_USGS <-  function(base_size = 12){theme(\n    plot.title = element_text (vjust = 3, size = 16), # plot title attrib.\n    plot.margin = unit (c(8, 4, 8, 4), \"lines\"), # plot margins\n    panel.border = element_rect (colour = \"black\", fill = F), # axis colour = black\n    #panel.grid.major = element_blank (), # remove major grid\n    panel.grid.minor = element_blank (), # remove minor grid\n    panel.background = element_rect (fill = \"white\"), # background colour\n    legend.background = element_rect (fill = \"white\"), # background colour\n    #legend.justification=c(0, 0), # lock point for legend\n    #legend.position = c(0, 1), # put the legend INSIDE the plot area, use = \"none\" to turn off\n    legend.key = element_blank (), # switch off the rectangle around symbols in the legend\n    legend.title = element_blank (), # switch off the legend title\n    legend.text = element_text (size = 12), # sets the attributes of the legend text\n    axis.title.x = element_text (vjust = -2, size = 14,family=\"Times New Roman\"), # change the axis title\n    axis.title.y = element_text (vjust = -0.1, angle = 90, size = 14,family=\"Times New Roman\"), # change the axis title\n    axis.text.x = element_text (size = 12, vjust = -0.25, colour = \"black\",family=\"Times New Roman\"),# change the axis label font attributes\n    axis.text.y = element_text (size = 12, hjust = 1, colour = \"black\",family=\"Times New Roman\"), # change the axis label font attributes\n    axis.ticks = element_line (colour = \"black\", size = 0.5), # sets the thickness and colour of axis ticks\n    axis.ticks.length = unit(-0.25 , \"cm\"), # -ve length = inside ticks\n    axis.ticks.margin = unit(0.5, \"cm\") # margin between the ticks and the text\n  )}\n  \n  \n  RQA <- function(maintitle,sitenumber,begindate,enddate,parameters,filename, points,logo,EPAstds,xbreak)\n  {\n    \n    ###read in data from NWIS\n    sitedata <- readNWISqw(sites = sitenumber, params = parameters, begin.date = begindate, end.date = enddate)\n    ###get parameter names\n    measparms <- unique(sitedata$parm_cd)\n    numparms <- length(measparms)\n    parmnames <- pcodeNWISqw(params = measparms,CASRN = TRUE)\n    parmnames$casrn <- gsub(\"[-]\",\"\",parmnames$casrn)\n    parmnames$casrn <- as.numeric(parmnames$casrn)\n    ###get names of pcodes\n    setPDF(\"landscape\",filename)\n    for (i in 1:length(measparms))\n    {\n      ###Declare variables\n      EPAacute <-NA\n      EPAchronic <-NA \n      EPAunits <- \" \"\n      EPAlimits <- textGrob(\" \")\n      plotdata <- subset(sitedata, parm_cd == measparms[i])\n      analyte <- parmnames$parameter_nm[which(parmnames$parameter_cd == measparms[i])]\n      if (length(analyte) != 0)\n      {\n        CASRN <- parmnames$casrn[which(parmnames$parameter_cd == measparms[i])]\n        EPAacute <- EPAstds$Acutefresh.ug.l.[which(EPAstds$CASRN == CASRN)]\n        EPAchronic <-EPAstds$Chronicfresh.ug.l.[which(EPAstds$CASRN == CASRN)]\n        ###Define units\n        units <- parmnames$parameter_units[which(parmnames$parameter_cd == measparms[i])]\n        \n        if (length(units) == 0)\n        {\n          EPAunits <- \"no units for pcode\"\n        }\n        \n        if (grepl(\"pH\",parmnames$srsname[which(parmnames$parameter_cd == measparms[i])]) == TRUE)\n        {\n          EPAchronic <- c(6.5,9)\n          EPAunits <- \"standard units\"\n        } else if (grepl(\"mg/l\",units) == TRUE)\n        {\n          EPAacute <- EPAacute/1000\n          EPAchronic <- EPAchronic/1000\n          EPAunits <- \"mg/l\"\n        } else if (grepl(\"ng/l\",units) == TRUE)\n        {\n          EPAacute <- EPAacute*1000\n          EPAchronic <- EPAchronic*1000\n          EPAunits <- \"ng/l\"\n        } else if (grepl(\"ug/l\",units) == TRUE)\n        {\n          EPAunits <- \"ug/l\"\n        } else{}\n        \n        if (grepl(\"pH\",analyte) == TRUE)\n        {\n          EPAlimits <- textGrob(paste(\"Aquatic life standard 6.5 to 9.0\\n\",\n                                      \"*Standard values may depend on site conditions or other parameters. Refer to EPA guidance\",sep=\" \"),\n                                gp = gpar(fontsize=12,col=\"red\",fontfamily=\"Times New Roman\"),just=\"center\")\n        }else if (length(EPAacute) != 0 && is.na(EPAacute) == FALSE && length(EPAchronic) != 0 && is.na(EPAchronic) == FALSE)\n        {\n          EPAlimits <- textGrob(paste(\"Aquatic life acute standard\",EPAacute,EPAunits,\n                                      \"\\n\",\"Aquatic life chronic standard\",EPAchronic,EPAunits, \n                                      \"\\n\",\"*Standard values may depend on site conditions or other parameters. Refer to EPA guidance\",sep=\" \"),\n                                gp = gpar(fontsize=12,col=\"red\",fontfamily=\"Times New Roman\"),just=\"center\")\n        }else if (length(EPAacute) != 0 && length(EPAchronic) != 0)\n        {\n          EPAlimits <- textGrob(paste(\"Aquatic life acute standard\",EPAacute,EPAunits,\n                                      \"\\n\",\"*Standard values may depend on site conditions or other parameters. Refer to EPA guidance\",sep=\" \"),\n                                gp = gpar(fontsize=12,col=\"red\",fontfamily=\"Times New Roman\"),just=\"center\")\n        }else if (length(EPAacute) != 0 && length(EPAchronic) != 0)\n        {\n          EPAlimits <- textGrob(paste(\"Aquatic life chronic standard\",EPAchronic,EPAunits,\n                                      \"\\n\",\"*Standard values may depend on site conditions or other parameters. Refer to EPA guidance\",sep=\" \"),\n                                gp = gpar(fontsize=12,col=\"red\",fontfamily=\"Times New Roman\"),just=\"center\")\n        } else{}\n        ####format y labels    \n        ylabel <- str_wrap(analyte, width = 75)\n        ###Plot with smooth\n        p1 <- ggplot(plotdata,  aes(sample_dt, result_va, shape = remark_cd)) + \n          geom_point(size = 3) + scale_shape_manual(\"Explanation\", labels = c(\"Sample\", \"<\",\"E\",\"M\"), values = c(19,0,2,4)) +\n          xlab(\"Date\") + \n          scale_x_date(labels = date_format(\"%b-%Y\")  , breaks = date_breaks(xbreak), limits= as.Date(c(begindate,enddate)) ) +\n          ylab(paste(ylabel,\"\\n\")) +\n          theme_USGS() + ggtitle(maintitle)\n        \n        if (nrow(subset(plotdata, remark_cd ==\"\")) > 5)\n        {\n          p1 <- p1 + stat_smooth(data = subset(plotdata, remark_cd ==\"\"),n=points,method=\"loess\")\n        }\n        if(length(EPAacute) != 0 && is.na(EPAacute) == FALSE && EPAacute < 2*max(plotdata$result_va))\n        {\n          p1 <- p1 + geom_hline(yintercept=EPAacute, colour=\"red\", linetype=\"dashed\") \n        }\n        if(length(EPAchronic) != 0 && is.na(EPAchronic) == FALSE && EPAchronic < 2*max(plotdata$result_va))\n        {\n          p1 <- p1 + geom_hline(yintercept=EPAchronic, colour=\"red\", linetype=\"solid\") \n        }\n        \n        \n        \n        \n        size <- unit(2, \"cm\")\n        \n        # Set up the layout for grid \n        heights <- unit.c(unit(1, \"npc\") - 1.5*size, size)\n        widths <- unit.c(size, unit(1, \"npc\") - size)\n        lo <- grid.layout(2, 2, widths = widths, heights = heights)\n        \n        \n        grid.newpage()\n        pushViewport(viewport(layout = lo))\n        \n        # The plot\n        pushViewport(viewport(layout.pos.row=1, layout.pos.col = 2))\n        print(p1, newpage=FALSE)\n        popViewport()\n        \n        # The logo\n        pushViewport(viewport(layout.pos.row=2, layout.pos.col = 1))\n        print(grid.draw(logo),newpage=FALSE)\n        popViewport()\n        \n        # EPA Limits\n        pushViewport(viewport(layout.pos.row=2, layout.pos.col = 2))\n        print(grid.draw(EPAlimits), newpage=FALSE)\n        popViewport()\n        popViewport()\n      }      \n    }\n    dev.off()\n  }\n  ####GUI\n  \n  \n  win <- gwindow(\"Data ReportR V1.0\")\n  frmX <- gframe(\"Single Site Input\", container = win,horizontal = FALSE)\n  lblX <- glabel(\"Site number\",container = frmX)\n  sitenumber <- gedit(container = frmX)\n  lblX <- glabel(\"Begin date\",container = frmX)\n  begindate <- gedit(container = frmX, initial.msg = \"yyyy-mm-dd\")\n  lblX <- glabel(\"End date\",container = frmX)\n  enddate <- gedit(container = frmX,initial.msg = \"yyyy-mm-dd\")\n  lblX <- glabel(\"Parameters\",container = frmX)\n  parms <- gcombobox(c(\"All\" , \"physical\", \"cations\", \"anions\", \"nutrients\",\n                     \"microbiological\", \"biological\", \"metals\", \"nonmetals\", \"pesticides\",\n                     \"pcbs\" ,\"other organics\" ,\"radio chemicals\", \"stable isotopes\", \"sediment\",\n                     \"population/community\"), container=frmX)\n  pfile <- gcheckbox(\"Read pcodes from file?\",checked=FALSE,container = frmX)\n  lblX <- glabel(\"parameter code file (if using)\",container = frmX)\n  parmfile <- gedit(container = frmX,initial.msg = \"filename including csv extension\")\n  lblX <- glabel(\"Plot title\",container = frmX)\n  plottitle <- gedit(container = frmX)\n  lblX <- glabel(\"Output file\",container = frmX)\n  outfile <- gedit(container = frmX, initial.msg = \"name of output file, no extension\")\n  \n  frmA <- gframe(\"Batch Processing\", container = win, horizontal = FALSE)\n  lblX <- glabel(\"Batch file\",container = frmA)\n  batchfile <- gedit(container = frmA,initial.msg = \"filename including csv extension\" )\n  parmsbatch <- gcombobox(c(\"All\" , \"physical\", \"cations\", \"anions\", \"nutrients\",\n                       \"microbiological\", \"biological\", \"metals\", \"nonmetals\", \"pesticides\",\n                       \"pcbs\" ,\"other organics\" ,\"radio chemicals\", \"stable isotopes\", \"sediment\",\n                       \"population/community\"), container=frmA)\n  pfilebatch <- gcheckbox(\"Read pcodes from file?\",checked=FALSE,container = frmA)\n  lblX <- glabel(\"parameter code file (if using)\",container = frmA)\n  parmfilebatch <- gedit(container = frmA,initial.msg = \"filename including csv extension\")\n  \n  frmB <- gframe(\"Control Panel\", container = win, horizontal = FALSE)\n  lblX <- glabel(\"Number of smooth points\",container = frmB)\n  npoints <- gedit(container = frmB)\n  lblX <- glabel(\"Date breaks\",container = frmB)\n  xbreak <- gcombobox(c(\"4 years\",\"2 years\",\"1 years\",\"6 months\",\"4 months\",\"1 months\",\"1 weeks\")\n                     , container=frmB)\n  batchproccess <- gcheckbox(\"Batch processing\",checked=FALSE,container = frmB)\n  btnCalc <- gbutton(\"Go-Go-Gadget Summary\", container = frmB,\n                     handler = function(h,...){\n                       maintitle <- svalue(plottitle)\n                       sitenumber <- svalue(sitenumber)\n                       begindate <- svalue(begindate)\n                       enddate <- svalue(enddate)\n                       filename <- svalue(outfile)\n                       points <- as.numeric(svalue(npoints))\n                       logo <- logo\n                       EPAstds <- EPAstds\n                       xbreak <- svalue(xbreak)\n                                            \n                       \n                       if (svalue(pfile) == TRUE){\n                         parameters <- scan(svalue(parmfile),what=\"character\")\n                       } else (parameters <- svalue(parms))\n                       \n                       if (svalue(batchproccess) == TRUE){\n                         batchsites <- read.csv(svalue(batchfile),header = TRUE)\n                         if (svalue(pfilebatch) == TRUE){\n                           parameters <- scan(svalue(parmfilebatch),what=\"character\")\n                         } else (parameters <- svalue(parmsbatch))\n                         \n                         for (i in 1:length(batchsites[,2]))\n                         {\n                           maintitle <- as.character(batchsites[i,1])\n                           sitenumber <- as.character(batchsites[i,2])\n                           begindate <- as.character(batchsites[i,3])\n                           enddate <- as.character(batchsites[i,4])\n                           filename <- as.character(sitenumber)\n                           RQA(maintitle,sitenumber,begindate,enddate,parameters,filename, points,logo,EPAstds,xbreak)######################################\n                         }\n                       } else(RQA(maintitle,sitenumber,begindate,enddate,parameters,filename, points,logo,EPAstds,xbreak))\n                       \n                      \n                      }\n                     )\n}\n\n  \nannualreport()\n  ",
    "created" : 1408477221819.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3128744000",
    "id" : "293BDF74",
    "lastKnownWriteTime" : 1405966399,
    "path" : "~/RQAGUI/gui2.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}