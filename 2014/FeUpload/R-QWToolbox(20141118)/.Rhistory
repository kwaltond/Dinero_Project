parm.group.check <- FALSE
} else if(svalue(pcode.method, index=TRUE) == 3)
{
dl.parms <- scan(svalue(parmfile),what="character")
parm.group.check <- FALSE
}
parm.group.check
source('~/R-QWToolbox(20141113)/Dataimport_GUI.R')
source('~/R-QWToolbox(20141113)/RQW-Toolbox_V0_1.R')
source('~/R-QWToolbox(20141113)/plotting_GUI.R')
View(plottable)
levels(factor(plottable$MEDIUM_CD))
plottable <- qw.data$PlotTable
View(plottable)
levels(factor(plottable$MEDIUM_CD))
levels(factor(plottable$REMARK_CD))
###Fancy ITS plot function
itsplot <- function() {
## Set up main group
mainGroup <- ggroup(container=gwindow("Interactive plot example"))
visible(mainGroup) <- FALSE
maintitle <- str_wrap(unique(qw.data$PlotTable$STATION_NM), width = 25)
## The graphics device
## The variable browser widget
vargroup <- gframe("Parameters",container=mainGroup,expand=FALSE)
analyte <- gtable(items = unique(qw.data$PlotTable$PARM_CD),multiple=FALSE,container = vargroup, expand = TRUE, fill = TRUE)
addHandlerClicked(analyte,handler = function(h,...) {
ylabel <- do.call("str_wrap",list(string=unique(qw.data$PlotTable$PARM_DS[which(qw.data$PlotTable$PARM_CD==svalue(analyte))]), width = 25))
p1 <- do.call("ggplot",list(data=subset(qw.data$PlotTable,PARM_CD==svalue(analyte)),aes(x=SAMPLE_START_DT,y=RESULT_VA,shape = REMARK_CD, color = MEDIUM_CD)))
p1 <- p1 + geom_point(size=3)
p1 <- p1 + ylab(paste(ylabel,"\n")) + xlab("Date")
p1 <- p1 + scale_shape_manual("Qualifier", labels = c("<",">","E","Sample"), values = c(19,0,2,4)) +
scale_color_manual("Medium code", labels = c("OAQ","WG", "WGQ","WS","WSQ"), values = c("dodgerblue3","chartreuse4","coral","coral1"))
p1 <- p1 + theme_USGS() + ggtitle(maintitle)
print(p1)
})
rightGroup <- ggroup(horizontal=FALSE, container=mainGroup, expand = TRUE)
ggraphics(container=rightGroup, expand = TRUE)
visible(mainGroup) <- TRUE
}
###Fancy ITS plot function
itsplot <- function() {
## Set up main group
mainGroup <- ggroup(container=gwindow("Interactive plot example"))
visible(mainGroup) <- FALSE
maintitle <- str_wrap(unique(qw.data$PlotTable$STATION_NM), width = 25)
## The graphics device
## The variable browser widget
vargroup <- gframe("Parameters",container=mainGroup,expand=FALSE)
analyte <- gtable(items = unique(qw.data$PlotTable$PARM_CD),multiple=FALSE,container = vargroup, expand = TRUE, fill = TRUE)
addHandlerClicked(analyte,handler = function(h,...) {
ylabel <- do.call("str_wrap",list(string=unique(qw.data$PlotTable$PARM_DS[which(qw.data$PlotTable$PARM_CD==svalue(analyte))]), width = 25))
p1 <- do.call("ggplot",list(data=subset(qw.data$PlotTable,PARM_CD==svalue(analyte)),aes(x=SAMPLE_START_DT,y=RESULT_VA,shape = REMARK_CD, color = MEDIUM_CD)))
p1 <- p1 + geom_point(size=3)
p1 <- p1 + ylab(paste(ylabel,"\n")) + xlab("Date")
#p1 <- p1 + scale_shape_manual("Qualifier", labels = c("<",">","E","Sample"), values = c(19,0,2,4)) +
#  scale_color_manual("Medium code", labels = c("OAQ","WG", "WGQ","WS","WSQ"), values = c("dodgerblue3","chartreuse4","coral","coral1"))
p1 <- p1 + theme_USGS() + ggtitle(maintitle)
print(p1)
})
rightGroup <- ggroup(horizontal=FALSE, container=mainGroup, expand = TRUE)
ggraphics(container=rightGroup, expand = TRUE)
visible(mainGroup) <- TRUE
}
myColors <- brewer.pal(5,"Set1")
names(myColors) <- levels(factor(qw.data$PlotTable$MEDIUM_CD))
length(levels(factor(qw.data$PlotTable$MEDIUM_CD)))
myColors <- palette(rainbow(10))
names(myColors) <- levels(factor(qw.data$PlotTable$MEDIUM_CD))
###Fancy ITS plot function
itsplot <- function() {
## Set up main group
mainGroup <- ggroup(container=gwindow("Interactive plot example"))
visible(mainGroup) <- FALSE
maintitle <- str_wrap(unique(qw.data$PlotTable$STATION_NM), width = 25)
## The graphics device
myColors <- palette(rainbow(10))
names(myColors) <- levels(factor(qw.data$PlotTable$MEDIUM_CD))
colScale <- scale_colour_manual(name = "grp",values = myColors)
## The variable browser widget
vargroup <- gframe("Parameters",container=mainGroup,expand=FALSE)
analyte <- gtable(items = unique(qw.data$PlotTable$PARM_CD),multiple=FALSE,container = vargroup, expand = TRUE, fill = TRUE)
addHandlerClicked(analyte,handler = function(h,...) {
ylabel <- do.call("str_wrap",list(string=unique(qw.data$PlotTable$PARM_DS[which(qw.data$PlotTable$PARM_CD==svalue(analyte))]), width = 25))
p1 <- do.call("ggplot",list(data=subset(qw.data$PlotTable,PARM_CD==svalue(analyte)),aes(x=SAMPLE_START_DT,y=RESULT_VA,shape = REMARK_CD, color = MEDIUM_CD)))
p1 <- p1 + geom_point(size=3)
p1 <- p1 + ylab(paste(ylabel,"\n")) + xlab("Date")
p1 <- p1 + scale_colour_manual("Medium code",values = myColors)
#p1 <- p1 + scale_shape_manual("Qualifier", labels = c("<",">","E","Sample"), values = c(19,0,2,4)) +
#  scale_color_manual("Medium code", labels = c("OAQ","WG", "WGQ","WS","WSQ"), values = c("dodgerblue3","chartreuse4","coral","coral1"))
p1 <- p1 + theme_USGS() + ggtitle(maintitle)
print(p1)
})
rightGroup <- ggroup(horizontal=FALSE, container=mainGroup, expand = TRUE)
ggraphics(container=rightGroup, expand = TRUE)
visible(mainGroup) <- TRUE
}
myColors <- palette(default(10))
myColors <- palette("default")
names(myColors) <- levels(factor(qw.data$PlotTable$MEDIUM_CD))
colScale <- scale_colour_manual(name = "grp",values = myColors)
myColors <- palette("default")
names(myColors) <- levels(factor(qw.data$PlotTable$MEDIUM_CD))
###Fancy ITS plot function
itsplot <- function() {
## Set up main group
mainGroup <- ggroup(container=gwindow("Interactive plot example"))
visible(mainGroup) <- FALSE
maintitle <- str_wrap(unique(qw.data$PlotTable$STATION_NM), width = 25)
## The graphics device
myColors <- palette("default")
names(myColors) <- levels(factor(qw.data$PlotTable$MEDIUM_CD))
## The variable browser widget
vargroup <- gframe("Parameters",container=mainGroup,expand=FALSE)
analyte <- gtable(items = unique(qw.data$PlotTable$PARM_CD),multiple=FALSE,container = vargroup, expand = TRUE, fill = TRUE)
addHandlerClicked(analyte,handler = function(h,...) {
ylabel <- do.call("str_wrap",list(string=unique(qw.data$PlotTable$PARM_DS[which(qw.data$PlotTable$PARM_CD==svalue(analyte))]), width = 25))
p1 <- do.call("ggplot",list(data=subset(qw.data$PlotTable,PARM_CD==svalue(analyte)),aes(x=SAMPLE_START_DT,y=RESULT_VA,shape = REMARK_CD, color = MEDIUM_CD)))
p1 <- p1 + geom_point(size=3)
p1 <- p1 + ylab(paste(ylabel,"\n")) + xlab("Date")
p1 <- p1 + scale_colour_manual("Medium code",values = myColors)
#p1 <- p1 + scale_shape_manual("Qualifier", labels = c("<",">","E","Sample"), values = c(19,0,2,4)) +
#  scale_color_manual("Medium code", labels = c("OAQ","WG", "WGQ","WS","WSQ"), values = c("dodgerblue3","chartreuse4","coral","coral1"))
p1 <- p1 + theme_USGS() + ggtitle(maintitle)
print(p1)
})
rightGroup <- ggroup(horizontal=FALSE, container=mainGroup, expand = TRUE)
ggraphics(container=rightGroup, expand = TRUE)
visible(mainGroup) <- TRUE
}
class(medium.colors)
medium.colors <- palette("default")
names(medium.colors) <- levels(factor(qw.data$PlotTable$MEDIUM_CD))
class(medium.colors)
itsplot <- function() {
## Set up main group
mainGroup <- ggroup(container=gwindow("Interactive plot example"))
visible(mainGroup) <- FALSE
maintitle <- str_wrap(unique(qw.data$PlotTable$STATION_NM), width = 25)
## Sets color to medium code name, not factor level, so its consistant between all plots regardles of number of medium codes in data
medium.colors <- palette("default")
#names(medium.colors) <- levels(factor(qw.data$PlotTable$MEDIUM_CD))
names(medium.colors) <- c("WS","WG","WSQ","WGQ","OAQ")
## Sets color to medium code name, not factor level, so its consistant between all plots regardles of number of medium codes in data
qual.shapes <- c("19","0","2","5")
names(qual.shapes) <- c("Sample","<",">","E")
## The variable browser widget
vargroup <- gframe("Parameters",container=mainGroup,expand=FALSE)
analyte <- gtable(items = unique(qw.data$PlotTable$PARM_CD),multiple=FALSE,container = vargroup, expand = TRUE, fill = TRUE)
addHandlerClicked(analyte,handler = function(h,...) {
ylabel <- do.call("str_wrap",list(string=unique(qw.data$PlotTable$PARM_DS[which(qw.data$PlotTable$PARM_CD==svalue(analyte))]), width = 25))
p1 <- do.call("ggplot",list(data=subset(qw.data$PlotTable,PARM_CD==svalue(analyte)),aes(x=SAMPLE_START_DT,y=RESULT_VA,shape = REMARK_CD, color = MEDIUM_CD)))
p1 <- p1 + geom_point(size=3)
p1 <- p1 + ylab(paste(ylabel,"\n")) + xlab("Date")
p1 <- p1 + scale_colour_manual("Medium code",values = medium.colors)
p1 <- p1 + scale_shape_manual("Medium code",values = qual.shapes)
#p1 <- p1 + scale_shape_manual("Qualifier", labels = c("<",">","E","Sample"), values = c(19,0,2,4)) +
#  scale_color_manual("Medium code", labels = c("OAQ","WG", "WGQ","WS","WSQ"), values = c("dodgerblue3","chartreuse4","coral","coral1"))
p1 <- p1 + theme_USGS() + ggtitle(maintitle)
print(p1)
})
rightGroup <- ggroup(horizontal=FALSE, container=mainGroup, expand = TRUE)
ggraphics(container=rightGroup, expand = TRUE)
visible(mainGroup) <- TRUE
}
###Fancy ITS plot function
itsplot <- function() {
## Set up main group
mainGroup <- ggroup(container=gwindow("Interactive plot example"))
visible(mainGroup) <- FALSE
maintitle <- str_wrap(unique(qw.data$PlotTable$STATION_NM), width = 25)
## Sets color to medium code name, not factor level, so its consistant between all plots regardles of number of medium codes in data
medium.colors <- palette("default")
#names(medium.colors) <- levels(factor(qw.data$PlotTable$MEDIUM_CD))
names(medium.colors) <- c("WS","WG","WSQ","WGQ","OAQ")
## Sets color to medium code name, not factor level, so its consistant between all plots regardles of number of medium codes in data
qual.shapes <- c(19,0,2,5)
names(qual.shapes) <- c("Sample","<",">","E")
## The variable browser widget
vargroup <- gframe("Parameters",container=mainGroup,expand=FALSE)
analyte <- gtable(items = unique(qw.data$PlotTable$PARM_CD),multiple=FALSE,container = vargroup, expand = TRUE, fill = TRUE)
addHandlerClicked(analyte,handler = function(h,...) {
ylabel <- do.call("str_wrap",list(string=unique(qw.data$PlotTable$PARM_DS[which(qw.data$PlotTable$PARM_CD==svalue(analyte))]), width = 25))
p1 <- do.call("ggplot",list(data=subset(qw.data$PlotTable,PARM_CD==svalue(analyte)),aes(x=SAMPLE_START_DT,y=RESULT_VA,shape = REMARK_CD, color = MEDIUM_CD)))
p1 <- p1 + geom_point(size=3)
p1 <- p1 + ylab(paste(ylabel,"\n")) + xlab("Date")
p1 <- p1 + scale_colour_manual("Medium code",values = medium.colors)
p1 <- p1 + scale_shape_manual("Medium code",values = qual.shapes)
#p1 <- p1 + scale_shape_manual("Qualifier", labels = c("<",">","E","Sample"), values = c(19,0,2,4)) +
#  scale_color_manual("Medium code", labels = c("OAQ","WG", "WGQ","WS","WSQ"), values = c("dodgerblue3","chartreuse4","coral","coral1"))
p1 <- p1 + theme_USGS() + ggtitle(maintitle)
print(p1)
})
rightGroup <- ggroup(horizontal=FALSE, container=mainGroup, expand = TRUE)
ggraphics(container=rightGroup, expand = TRUE)
visible(mainGroup) <- TRUE
}
###Fancy ITS plot function
itsplot <- function() {
## Set up main group
mainGroup <- ggroup(container=gwindow("Interactive plot example"))
visible(mainGroup) <- FALSE
maintitle <- str_wrap(unique(qw.data$PlotTable$STATION_NM), width = 25)
## Sets color to medium code name, not factor level, so its consistant between all plots regardles of number of medium codes in data
medium.colors <- palette("default")
#names(medium.colors) <- levels(factor(qw.data$PlotTable$MEDIUM_CD))
names(medium.colors) <- c("WS ","WG ","WSQ","WGQ","OAQ")
## Sets color to medium code name, not factor level, so its consistant between all plots regardles of number of medium codes in data
qual.shapes <- c(19,0,2,5)
names(qual.shapes) <- c("Sample","<",">","E")
## The variable browser widget
vargroup <- gframe("Parameters",container=mainGroup,expand=FALSE)
analyte <- gtable(items = unique(qw.data$PlotTable$PARM_CD),multiple=FALSE,container = vargroup, expand = TRUE, fill = TRUE)
addHandlerClicked(analyte,handler = function(h,...) {
ylabel <- do.call("str_wrap",list(string=unique(qw.data$PlotTable$PARM_DS[which(qw.data$PlotTable$PARM_CD==svalue(analyte))]), width = 25))
p1 <- do.call("ggplot",list(data=subset(qw.data$PlotTable,PARM_CD==svalue(analyte)),aes(x=SAMPLE_START_DT,y=RESULT_VA,shape = REMARK_CD, color = MEDIUM_CD)))
p1 <- p1 + geom_point(size=3)
p1 <- p1 + ylab(paste(ylabel,"\n")) + xlab("Date")
p1 <- p1 + scale_colour_manual("Medium code",values = medium.colors)
p1 <- p1 + scale_shape_manual("Medium code",values = qual.shapes)
#p1 <- p1 + scale_shape_manual("Qualifier", labels = c("<",">","E","Sample"), values = c(19,0,2,4)) +
#  scale_color_manual("Medium code", labels = c("OAQ","WG ", "WGQ","WS ","WSQ"), values = c("dodgerblue3","chartreuse4","coral","coral1"))
p1 <- p1 + theme_USGS() + ggtitle(maintitle)
print(p1)
})
rightGroup <- ggroup(horizontal=FALSE, container=mainGroup, expand = TRUE)
ggraphics(container=rightGroup, expand = TRUE)
visible(mainGroup) <- TRUE
}
itsplot <- function() {
## Set up main group
mainGroup <- ggroup(container=gwindow("Interactive plot example"))
visible(mainGroup) <- FALSE
maintitle <- str_wrap(unique(qw.data$PlotTable$STATION_NM), width = 25)
## Sets color to medium code name, not factor level, so its consistant between all plots regardles of number of medium codes in data
medium.colors <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442")
#names(medium.colors) <- levels(factor(qw.data$PlotTable$MEDIUM_CD))
names(medium.colors) <- c("WS ","WG ","WSQ","WGQ","OAQ")
## Sets color to medium code name, not factor level, so its consistant between all plots regardles of number of medium codes in data
qual.shapes <- c(19,0,2,5)
names(qual.shapes) <- c("Sample","<",">","E")
## The variable browser widget
vargroup <- gframe("Parameters",container=mainGroup,expand=FALSE)
analyte <- gtable(items = unique(qw.data$PlotTable$PARM_CD),multiple=FALSE,container = vargroup, expand = TRUE, fill = TRUE)
addHandlerClicked(analyte,handler = function(h,...) {
ylabel <- do.call("str_wrap",list(string=unique(qw.data$PlotTable$PARM_DS[which(qw.data$PlotTable$PARM_CD==svalue(analyte))]), width = 25))
p1 <- do.call("ggplot",list(data=subset(qw.data$PlotTable,PARM_CD==svalue(analyte)),aes(x=SAMPLE_START_DT,y=RESULT_VA,shape = REMARK_CD, color = MEDIUM_CD)))
p1 <- p1 + geom_point(size=3)
p1 <- p1 + ylab(paste(ylabel,"\n")) + xlab("Date")
p1 <- p1 + scale_colour_manual("Medium code",values = medium.colors)
p1 <- p1 + scale_shape_manual("Medium code",values = qual.shapes)
#p1 <- p1 + scale_shape_manual("Qualifier", labels = c("<",">","E","Sample"), values = c(19,0,2,4)) +
#  scale_color_manual("Medium code", labels = c("OAQ","WG ", "WGQ","WS ","WSQ"), values = c("dodgerblue3","chartreuse4","coral","coral1"))
p1 <- p1 + theme_USGS() + ggtitle(maintitle)
print(p1)
})
rightGroup <- ggroup(horizontal=FALSE, container=mainGroup, expand = TRUE)
ggraphics(container=rightGroup, expand = TRUE)
visible(mainGroup) <- TRUE
}
qw.data
datatable <- qw.data$DataTable
View(datatable)
datatable <- qw.data$PlotTable
View(datatable)
View(plottable)
View(datatable)
View(test)
View(plottable)
source('~/R-QWToolbox(20141113)/RQW-Toolbox_V0_1.R')
source('~/R-QWToolbox(20141113)/plotting_GUI.R')
source('~/R-QWToolbox(20141113)/RQW-Toolbox_V0_1.R')
source('~/R-QWToolbox(20141113)/plotting_GUI.R')
source('~/.active-rstudio-document')
mancoswelldata <- qw.data$DataTable
View(mancoswelldata)
mancoswelldata <- qw.data$DataTable
View(mancoswelldata)
source('~/.active-rstudio-document')
STAIDS <- as.vector(read.csv(svalue(ID.file),header=FALSE,colClasses = c("character")))
View(STAIDS)
DSN <- "NWISCO"
env.db <- "01"
qa.db <- "02"
STAID.list <- paste("'", STAIDS, "'", sep="", collapse=",")
# Open the odbc connection
Chan1 <- odbcConnect(DSN)
##################
###Env Database###
##################
# First get the site info--need column SITE_ID
Query <- paste("select * from ", DSN, ".SITEFILE_",env.db," where site_no IN (", STAID.list, ")", sep="")
SiteFile <- sqlQuery(Chan1, Query, as.is=T)
STAIDS <- c("391454106224201",
"391500106224901",
"391501106224901",
"391504106225200",
"391504106225201")
STAID.list <- paste("'", STAIDS, "'", sep="", collapse=",")
STAIDS <- as.vector(read.csv(svalue(ID.file),header=FALSE,colClasses = c("character")))
STAIDS <- as.character((read.csv(svalue(ID.file),header=FALSE,colClasses = c("character")))
STAIDS <- as.character(read.csv(svalue(ID.file),header=FALSE,colClasses = c("character")))
STAIDS <- (read.csv(svalue(ID.file),header=FALSE,colClasses = c("character")))
STAID.list <- paste("'", STAIDS[,1], "'", sep="", collapse=",")
STAIDS <- (scan(svalue(ID.file),header=FALSE,colClasses = c("character")))
STAIDS <- (scan(svalue(ID.file)))
STAIDS <- as.character((scan(svalue(ID.file)))
STAIDS <- as.character(scan(svalue(ID.file)))
STAID.list <- paste("'", STAIDS, "'", sep="", collapse=",")
source('~/R-QWToolbox(20141113)/Dataimport_GUI.R')
mancoswelldata <- qw.data$DataTable
View(mancoswelldata)
cor(mancoswelldata)
write.table(mancoswelldata)
write.table(mancoswelldata,file="mancoswelldata")
write.table(mancoswelldata,file="mancoswelldata",row.names=FALSE)
write.table(mancoswelldata,file="mancoswelldata",row.names=FALSE)
rqwtoolbox <- function(){
source("R/widgetfunctions.r")
source("R/plottypes.r")
source("R/preferences.r")
source("R/libraries.r")
source("R/NWISUploadRV1_4(20141113).r")
source("R/NWIS_PullR(20141113).r")
##################
###Main window
##################
w <- gwindow("Toolkit example")
visible(w) <- FALSE #Hide the GUI until its fully built
###Toolbar setup
tbl <- list()
tbl$Save <- list(icon="save",handler = function(...) print("save"))
tbl$Open <- list(icon="open",handler = function(...) print("open"))
tbl$New <- list(icon="new",handler = function(...) print("new"))
tbl$Quit <- list(icon="close",handler = function(...) print("quit"))
tb <- gtoolbar(tbl, container=w)
###Notebook
nb <- gnotebook(container=w)
###################
###Data import Tab
###################
source("Dataimport_GUI.R")
###################
###Plotting tab
###################
###################
###Blanks and reps tab
###################
###################
###DQI Tab
###################
#####################
###Data Upload tab
#####################
source("NWISUploadR_GUI_V1.r")
visible(w) <- TRUE
}
rqwtoolbox()
rqwtoolbox <- function(){
source("R/widgetfunctions.r")
source("R/plottypes.r")
source("R/preferences.r")
source("R/libraries.r")
source("R/NWISUploadRV1_4(20141113).r")
source("R/NWIS_PullR(20141113).r")
sourcE("R/Dataimport_GUI.r")
##################
###Main window
##################
w <- gwindow("Toolkit example")
visible(w) <- FALSE #Hide the GUI until its fully built
###Toolbar setup
tbl <- list()
tbl$Save <- list(icon="save",handler = function(...) print("save"))
tbl$Open <- list(icon="open",handler = function(...) print("open"))
tbl$New <- list(icon="new",handler = function(...) print("new"))
tbl$Quit <- list(icon="close",handler = function(...) print("quit"))
tb <- gtoolbar(tbl, container=w)
###Notebook
nb <- gnotebook(container=w)
###################
###Data import Tab
###################
source("Dataimport_GUI.R")
###################
###Plotting tab
###################
###################
###Blanks and reps tab
###################
###################
###DQI Tab
###################
#####################
###Data Upload tab
#####################
source("NWISUploadR_GUI_V1.r")
visible(w) <- TRUE
}
rqwtoolbox()
rqwtoolbox <- function(){
source("R/widgetfunctions.r")
source("R/plottypes.r")
source("R/preferences.r")
source("R/libraries.r")
source("R/NWISUploadRV1_4(20141113).r")
source("R/NWIS_PullR(20141113).r")
source("R/Dataimport_GUI.r")
##################
###Main window
##################
w <- gwindow("Toolkit example")
visible(w) <- FALSE #Hide the GUI until its fully built
###Toolbar setup
tbl <- list()
tbl$Save <- list(icon="save",handler = function(...) print("save"))
tbl$Open <- list(icon="open",handler = function(...) print("open"))
tbl$New <- list(icon="new",handler = function(...) print("new"))
tbl$Quit <- list(icon="close",handler = function(...) print("quit"))
tb <- gtoolbar(tbl, container=w)
###Notebook
nb <- gnotebook(container=w)
###################
###Data import Tab
###################
source("Dataimport_GUI.R")
###################
###Plotting tab
###################
###################
###Blanks and reps tab
###################
###################
###DQI Tab
###################
#####################
###Data Upload tab
#####################
source("NWISUploadR_GUI_V1.r")
visible(w) <- TRUE
}
rqwtoolbox()
rqwtoolbox <- function(){
source("R/widgetfunctions.r")
source("R/plottypes.r")
source("R/preferences.r")
source("R/libraries.r")
source("R/NWISUploadRV1_4(20141113).r")
source("R/NWIS_PullR(20141113).r")
##################
###Main window
##################
w <- gwindow("Toolkit example")
visible(w) <- FALSE #Hide the GUI until its fully built
###Toolbar setup
tbl <- list()
tbl$Save <- list(icon="save",handler = function(...) print("save"))
tbl$Open <- list(icon="open",handler = function(...) print("open"))
tbl$New <- list(icon="new",handler = function(...) print("new"))
tbl$Quit <- list(icon="close",handler = function(...) print("quit"))
tb <- gtoolbar(tbl, container=w)
###Notebook
nb <- gnotebook(container=w)
###################
###Data import Tab
###################
source("R/Dataimport_GUI.R")
###################
###Plotting tab
###################
###################
###Blanks and reps tab
###################
###################
###DQI Tab
###################
#####################
###Data Upload tab
#####################
source("R/NWISUploadR_GUI_V1.r")
visible(w) <- TRUE
}
rqwtoolbox()
source('~/R-QWToolbox(20141118)/R/RQW-Toolbox_V0_1.R')
source("R/widgetfunctions.r")
source("R/plottypes.r")
source("R/preferences.r")
source("R/libraries.r")
source("R/NWISUploadRV1_4(20141113).r")
source("R/NWIS_PullR(20141113).r")
##################
###Main window
##################
w <- gwindow("Toolkit example")
visible(w) <- FALSE #Hide the GUI until its fully built
###Toolbar setup
tbl <- list()
tbl$Save <- list(icon="save",handler = function(...) print("save"))
tbl$Open <- list(icon="open",handler = function(...) print("open"))
tbl$New <- list(icon="new",handler = function(...) print("new"))
tbl$Quit <- list(icon="close",handler = function(...) print("quit"))
tb <- gtoolbar(tbl, container=w)
###Notebook
nb <- gnotebook(container=w)
###################
###Data import Tab
###################
source("R/Dataimport_GUI.R")
source("R/NWISUploadR_GUI_V1.r")
source('~/R-QWToolbox(20141118)/R/RQW-Toolbox_V0_1.R')
source('~/.active-rstudio-document')
source('Z:/tmills/Dinero/2014/FeUpload/R-QWToolbox(20141118)/R/RQW-Toolbox_V0_1.R')
