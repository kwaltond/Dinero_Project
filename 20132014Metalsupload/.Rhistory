analyteParms <- parameters[grep(analyte,parameters$parameter_nm,ignore.case=TRUE),]
View(analyteParms)
###2013 FAs
nwisupload(qwsampletype = 1,
DSN= "NWISCO",
env.db = "01",
qa.db = "02",
pcodefile = "pcodefile.csv",
labfile = "2013_FA_labfile.csv",
qwresultname = "2013_FA_qwresult",
qwsamplename = "2013_FA_qwsample",
qwsample.begin.date = "2013-01-01",
qwsample.end.date = "2014-12-31",
censor=TRUE)
source('Z:/tmills/Dinero/20132014Metalsupload/Rupload_2013_2014_metals.R')
###2013 RAs
nwisupload(qwsampletype = 1,
DSN= "NWISCO",
env.db = "01",
qa.db = "02",
pcodefile = "pcodefile.csv",
labfile = "2013_RA_labfile.csv",
qwresultname = "2013_RA_qwresult",
qwsamplename = "2013_RA_qwsample",
qwsample.begin.date = "2013-01-01",
qwsample.end.date = "2014-12-31",
censor=TRUE)
qwsampletype = 1
DSN= "NWISCO"
env.db = "01"
qa.db = "02"
pcodefile = "pcodefile.csv"
labfile = "2013_FA_labfile.csv"
qwresultname = "2013_FA_qwresult"
qwsamplename = "2013_FA_qwsample"
qwsample.begin.date = "2013-01-01"
qwsample.end.date = "2014-12-31"
censor=TRUE
qwsampletype = 1
DSN= "NWISCO"
env.db = "01"
qa.db = "02"
pcodefile = "pcodefile.csv"
labfile = "2014_FA_labfile.csv"
qwresultname = "2014_FA_qwresult"
qwsamplename = "2014_FA_qwsample"
qwsample.begin.date = "2013-01-01"
qwsample.end.date = "2014-12-31"
censor=TRUE
###Convert times to POSIXct, this will put it in GMT so it might not match exactly with what user wants, need to provide a day buffer on either side
if(!is.na(qwsample.begin.date) && !is.na(qwsample.end.date))
{
qwsample.begin.date <- as.POSIXct(qwsample.begin.date) - 60*60*24
qwsample.end.date <- as.POSIXct(qwsample.end.date) + 60*60*24
} else{}
data<-read.csv(labfile,header=TRUE,
colClasses = c("character","character","character","character","character","character"),na.strings = "NA")
numdatacols <- ncol(data)-6
pcodedata <- read.csv(pcodefile,header=TRUE,
colClasses = "character",na.strings = "NA")
names(pcodedata) <- c("pcode",
"qa.code",
"method.code",
"rounding.code",
"qualifiers",
"reporting.level",
"reporting.level.type",
"dqi.code",
"null.value.qualifier",
"prep.set.no",
"analytical.set.no",
"analysis.date",
"prep.date",
"lab.comment",
"field.comment",
"lab.stdev",
"analyzing.entity.code"
)
STAID <- data[[1]]
#Change to a list that SQL can understand. SQL requires a parenthesized list of expressions, so must look like c('05325000', '05330000') for example
STAID.list <- paste("'", STAID, "'", sep="", collapse=",")
# Open the odbc connection
Chan1 <- odbcConnect(DSN)
##################
###DATABASE 1#####
##################
#get the record numbers
Query <- paste("select * from ", DSN, ".QW_SAMPLE_",env.db," where site_no IN (", STAID.list, ")", sep="")
Samples <- sqlQuery(Chan1, Query, as.is=T)
###SAMPLE TIMES PULLED THIS WAY ARE NOT THE ACTUAL SAMPLE TIME. THESE MUST BE CONVERTED USING THE SAMPLE_START_TZ_CD OR THEY WILL NOT MATCH ACTUAL SAMPLE TIMES
###THERE IS CODE BELOW TO DO THIS
QWSample1 <- data.frame(Samples$RECORD_NO,
"*UNSPECIFIED*",
Samples$AGENCY_CD,
Samples$SITE_NO,
Samples$SAMPLE_START_DT,
Samples$SAMPLE_END_DT,
Samples$MEDIUM_CD,
Samples$LAB_NO,
Samples$PROJECT_CD,
Samples$AQFR_CD,
Samples$SAMP_TYPE_CD,
Samples$ANL_STAT_CD,
"",
Samples$HYD_COND_CD,
Samples$HYD_EVENT_CD,
Samples$TU_ID,
Samples$BODY_PART_ID,
"",
"",
"",
"",
Samples$COLL_ENT_CD,
Samples$SAMPLE_START_TZ_CD,
Samples$SAMPLE_START_LOCAL_TM_FG)
##################
###DATABASE 2#####
##################
#get the record numbers
Query <- paste("select * from ", DSN, ".QW_SAMPLE_",qa.db," where site_no IN (", STAID.list, ")", sep="")
Samples <- sqlQuery(Chan1, Query, as.is=T)
####Close ODBC Connection
odbcClose(Chan1)
######################
QWSample2 <- data.frame(Samples$RECORD_NO,
"*UNSPECIFIED*",
Samples$AGENCY_CD,
Samples$SITE_NO,
Samples$SAMPLE_START_DT,
Samples$SAMPLE_END_DT,
Samples$MEDIUM_CD,
Samples$LAB_NO,
Samples$PROJECT_CD,
Samples$AQFR_CD,
Samples$SAMP_TYPE_CD,
Samples$ANL_STAT_CD,
"",
Samples$HYD_COND_CD,
Samples$HYD_EVENT_CD,
Samples$TU_ID,
Samples$BODY_PART_ID,
"",
"",
"",
"",
Samples$COLL_ENT_CD,
Samples$SAMPLE_START_TZ_CD,
Samples$SAMPLE_START_LOCAL_TM_FG)
qwsample <- rbind(QWSample1,QWSample2)
qwsampleheader <- c("sample.integer",  "user.code",  "agency",  "site.no",  "start.date",  "end.date",  "medium",  "labid",
"project.code",  "aquifer.code",	"sample.type",	"analysis.status",	"analysis.source",	"hydrologic.cond",
"hydrologic.event",	"tissue",	"body.part",	"lab.comment.",	"field.comment",	"time.datum",	"datum.reliability",
"collecting.agency.code","time.zone","std.time.code")
colnames(qwsample)<-qwsampleheader
##Format times into GMT and correct of daylight savings offset according to location
##Weather or not to apply daylight savings is in the std.time.code column, which is from the SAMPLE_START_LOCAL_TM_FG NWIS parameter
##e.g. in Colorado, SAMPLE_START_LOCAL_TM_FG = Y, timezone = MDT, SAMPLE_START_LOCAL_TM_FG = N, timezone = MST
qwsample$start.date <- as.POSIXct(qwsample$start.date, tz="GMT")
if(!is.na(qwsample.begin.date) && !is.na(qwsample.end.date))
{
qwsample <- subset(qwsample, start.date >= qwsample.begin.date & start.date <= qwsample.end.date)
} else{}
qwsample$offset <- ifelse (qwsample$std.time.code == "Y", 60*60,0)
qwsample$start.date.offset <- qwsample$start.date + qwsample$offset
###Format times from GMT to appropriate time zone
###Using a loop because I could not figure out how to vectorize it, perhaps "mapply" would work, but don't know
for ( i in 1:nrow(qwsample))
{
###Converts to time zone
qwsample$start.date.adj[i] <- format(qwsample$start.date.offset[i],"%Y%m%d%H%M", tz=as.character(qwsample$time.zone[i]))
}
qwsample$start.date <- qwsample$start.date.adj
qwsample$start.date.adj <- NULL
qwsample$offset <- NULL
qwsample$start.date.offset <- NULL
qwsample$time.zone <- NULL
###Remove extra empty character space from medium to make it match medium in data file of 2-3 char
qwsample$medium <- (gsub(" ", "", qwsample$medium))
qwsample$sample.integer <- seq(1:nrow(qwsample))
qwsample$UID <- paste(qwsample$site.no,qwsample$start.date,qwsample$medium,sep="")
View(qwsample)
###Rearrange data frame into qwresult format
meltdata<-melt(data,id.vars=colnames(data[,1:6]))
meltdata$variable <- (gsub("X", "", meltdata$variable))
colnames(meltdata) <- c("USGS.SID" , "Sample.start.date..yyyymmdd.",	"Sample.start.time..hhmm.","medium","Sample.end.date..yyyymmdd.",  "Sample.end.time..hhmm.",	"pcode",	"result")
###Make a unique sample ID out of ID date time medium code
meltdata$UID <- paste(meltdata$USGS.SID,meltdata$Sample.start.date..yyyymmdd.,meltdata$Sample.start.time..hhmm.,meltdata$medium,sep="")
View(meltdata)
unique(meltdata$medium)
###2014 FAs
nwisupload(qwsampletype = 1,
DSN= "NWISCO",
env.db = "01",
qa.db = "02",
pcodefile = "pcodefile.csv",
labfile = "2014_FA_labfile.csv",
qwresultname = "2014_FA_qwresult",
qwsamplename = "2014_FA_qwsample",
qwsample.begin.date = "2013-01-01",
qwsample.end.date = "2014-12-31",
censor=TRUE)
###2014 RAs
nwisupload(qwsampletype = 1,
DSN= "NWISCO",
env.db = "01",
qa.db = "02",
pcodefile = "pcodefile.csv",
labfile = "2014_RA_labfile.csv",
qwresultname = "2014_RA_qwresult",
qwsamplename = "2014_RA_qwsample",
qwsample.begin.date = "2013-01-01",
qwsample.end.date = "2014-12-31",
censor=TRUE)
qwtoolbox("AllsiteIDs.csv")
source('Z:/tmills/Dinero/20132014Metalsupload/Rupload_2013_2014_metals.R')
library(QWToolbox)
library(QWToolbox)
###2013 FAs
dataUpload(qwsampletype = 1,
DSN= "NWISCO",
env.db = "01",
qa.db = "02",
pcodefile = "pcodefile.csv",
labfile = "2013_FA_labfile.csv",
qwresultname = "2013_FA_qwresult",
qwsamplename = "2013_FA_qwsample",
qwsample.begin.date = "2013-01-01",
qwsample.end.date = "2014-12-31",
censor=TRUE)
dataUpload(qwsampletype = 1,
DSN= "NWISCO",
env.db = "01",
qa.db = "02",
pcodefile = "pcodefile.csv",
labfile = "2013_FA_labfile.csv",
qwresultname = "2013_FA_qwresult",
qwsamplename = "2013_FA_qwsample",
qwsample.begin.date = "2013-01-01",
qwsample.end.date = "2014-12-31",
censor=TRUE)
###2013 RAs
dataUpload(qwsampletype = 1,
DSN= "NWISCO",
env.db = "01",
qa.db = "02",
pcodefile = "pcodefile.csv",
labfile = "2013_RA_labfile.csv",
qwresultname = "2013_RA_qwresult",
qwsamplename = "2013_RA_qwsample",
qwsample.begin.date = "2013-01-01",
qwsample.end.date = "2014-12-31",
censor=TRUE)
###2014 FAs
dataUpload(qwsampletype = 1,
DSN= "NWISCO",
env.db = "01",
qa.db = "02",
pcodefile = "pcodefile.csv",
labfile = "2014_FA_labfile.csv",
qwresultname = "2014_FA_qwresult",
qwsamplename = "2014_FA_qwsample",
qwsample.begin.date = "2013-01-01",
qwsample.end.date = "2014-12-31",
censor=TRUE)
###2014 RAs
dataUpload(qwsampletype = 1,
DSN= "NWISCO",
env.db = "01",
qa.db = "02",
pcodefile = "pcodefile.csv",
labfile = "2014_RA_labfile.csv",
qwresultname = "2014_RA_qwresult",
qwsamplename = "2014_RA_qwsample",
qwsample.begin.date = "2013-01-01",
qwsample.end.date = "2014-12-31",
censor=TRUE)
dataUpload
dataUpload
qwsampletype = 1
DSN= "NWISCO"
env.db = "01"
qa.db = "02"
pcodefile = "pcodefile.csv"
labfile = "2013_FA_labfile.csv"
qwresultname = "2013_FA_qwresult"
qwsamplename = "2013_FA_qwsample"
qwsample.begin.date = "2013-01-01"
qwsample.end.date = "2014-12-31"
censor=TRUE
if (!is.na(qwsample.begin.date) && !is.na(qwsample.end.date)) {
qwsample.begin.date <- as.POSIXct(qwsample.begin.date) -
60 * 60 * 24
qwsample.end.date <- as.POSIXct(qwsample.end.date) +
60 * 60 * 24
}
else {
}
if (!is.na(qwsample.begin.date) && !is.na(qwsample.end.date)) {
qwsample.begin.date <- as.POSIXct(qwsample.begin.date) -
60 * 60 * 24
qwsample.end.date <- as.POSIXct(qwsample.end.date) +
60 * 60 * 24
} else {}
data <- read.csv(labfile, header = TRUE, colClasses = c("character",
"character", "character", "character", "character", "character"),
na.strings = "NA")
numdatacols <- ncol(data) - 6
data$medium.code[which(nchar(data$medium.code) == 2)] <- paste(data$medium.code[which(nchar(data$medium.code) ==
2)], " ", sep = "")
data$Sample.time..hhmm.[which(nchar(data$Sample.time..hhmm.) ==
3)] <- paste("0", data$Sample.time..hhmm.[which(nchar(data$Sample.time..hhmm.) ==
3)], sep = "")
###Convert times to POSIXct, this will put it in GMT so it might not match exactly with what user wants, need to provide a day buffer on either side
if(!is.na(qwsample.begin.date) && !is.na(qwsample.end.date))
{
qwsample.begin.date <- as.POSIXct(qwsample.begin.date) - 60*60*24
qwsample.end.date <- as.POSIXct(qwsample.end.date) + 60*60*24
} else{}
data<-read.csv(labfile,header=TRUE,
colClasses = c("character","character","character","character","character","character"),na.strings = "NA")
numdatacols <- ncol(data)-6
##Add in spaces for medium codes to match NWIS
data$medium.code[which(nchar(data$medium.code) == 2)] <- paste(data$medium.code[which(nchar(data$medium.code) == 2)]," ",sep="")
##Pad times with leading 0s if truncated by excel
data$Sample.time..hhmm.[which(nchar(data$Sample.time..hhmm.) == 3)] <- paste("0",data$Sample.time..hhmm.[which(nchar(data$Sample.time..hhmm.) == 3)],sep="")
data$Sample.time..hhmm.[which(nchar(data$Sample.time..hhmm.) == 3)]
data$medium.code[which(nchar(data$medium.code) == 2)]
##Add in spaces for medium codes to match NWIS
if(!(is.null(data$medium.code[which(nchar(data$medium.code) == 2)])))
{
data$medium.code[which(nchar(data$medium.code) == 2)] <- paste(data$medium.code[which(nchar(data$medium.code) == 2)]," ",sep="")
}else{}
##Pad times with leading 0s if truncated by excel
if(!(is.null(data$Sample.time..hhmm.[which(nchar(data$Sample.time..hhmm.) == 3)])))
{
data$Sample.time..hhmm.[which(nchar(data$Sample.time..hhmm.) == 3)] <- paste("0",data$Sample.time..hhmm.[which(nchar(data$Sample.time..hhmm.) == 3)],sep="")
}
dataUpload(qwsampletype = 1,
DSN= "NWISCO",
env.db = "01",
qa.db = "02",
pcodefile = "pcodefile.csv",
labfile = "2013_FA_labfile.csv",
qwresultname = "2013_FA_qwresult",
qwsamplename = "2013_FA_qwsample",
qwsample.begin.date = "2013-01-01",
qwsample.end.date = "2014-12-31",
censor=TRUE)
library(QWToolbox)
###2013 FAs
dataUpload(qwsampletype = 1,
DSN= "NWISCO",
env.db = "01",
qa.db = "02",
pcodefile = "pcodefile.csv",
labfile = "2013_FA_labfile.csv",
qwresultname = "2013_FA_qwresult",
qwsamplename = "2013_FA_qwsample",
qwsample.begin.date = "2013-01-01",
qwsample.end.date = "2014-12-31",
censor=TRUE)
###2013 RAs
dataUpload(qwsampletype = 1,
DSN= "NWISCO",
env.db = "01",
qa.db = "02",
pcodefile = "pcodefile.csv",
labfile = "2013_RA_labfile.csv",
qwresultname = "2013_RA_qwresult",
qwsamplename = "2013_RA_qwsample",
qwsample.begin.date = "2013-01-01",
qwsample.end.date = "2014-12-31",
censor=TRUE)
###2014 FAs
dataUpload(qwsampletype = 1,
DSN= "NWISCO",
env.db = "01",
qa.db = "02",
pcodefile = "pcodefile.csv",
labfile = "2014_FA_labfile.csv",
qwresultname = "2014_FA_qwresult",
qwsamplename = "2014_FA_qwsample",
qwsample.begin.date = "2013-01-01",
qwsample.end.date = "2014-12-31",
censor=TRUE)
###2014 RAs
dataUpload(qwsampletype = 1,
DSN= "NWISCO",
env.db = "01",
qa.db = "02",
pcodefile = "pcodefile.csv",
labfile = "2014_RA_labfile.csv",
qwresultname = "2014_RA_qwresult",
qwsamplename = "2014_RA_qwsample",
qwsample.begin.date = "2013-01-01",
qwsample.end.date = "2014-12-31",
censor=TRUE)
source('Z:/tmills/Dinero/20132014Metalsupload/Rupload_2013_2014_metals.R')
source('Z:/tmills/Dinero/20132014Metalsupload/Rupload_2013_2014_metals.R')
library(QWToolbox)
###2014 FAs
dataUpload(qwsampletype = 1,
DSN= "NWISCO",
env.db = "01",
qa.db = "02",
pcodefile = "pcodefile.csv",
labfile = "2014_FA_labfile.csv",
qwresultname = "2014_FA_qwresult",
qwsamplename = "2014_FA_qwsample",
qwsample.begin.date = "2013-01-01",
qwsample.end.date = "2014-12-31",
censor=TRUE)
###2014 RAs
dataUpload(qwsampletype = 1,
DSN= "NWISCO",
env.db = "01",
qa.db = "02",
pcodefile = "pcodefile.csv",
labfile = "2014_RA_labfile.csv",
qwresultname = "2014_RA_qwresult",
qwsamplename = "2014_RA_qwsample",
qwsample.begin.date = "2013-01-01",
qwsample.end.date = "2014-12-31",
censor=TRUE)
qwsampletype = 1
DSN= "NWISCO"
env.db = "01"
qa.db = "02"
pcodefile = "pcodefile.csv"
labfile = "2014_FA_labfile.csv"
qwresultname = "2014_FA_qwresult"
qwsamplename = "2014_FA_qwsample"
qwsample.begin.date = "2013-01-01"
qwsample.end.date = "2014-12-31"
censor=TRUE
library(RODBC)
library(plyr)
library(reshape2)
library(QWToolbox)
###Convert times to POSIXct, this will put it in GMT so it might not match exactly with what user wants, need to provide a day buffer on either side
if(!is.na(qwsample.begin.date) && !is.na(qwsample.end.date))
{
qwsample.begin.date <- as.POSIXct(qwsample.begin.date) - 60*60*24
qwsample.end.date <- as.POSIXct(qwsample.end.date) + 60*60*24
} else{}
data<-read.csv(labfile,header=TRUE,
colClasses = c("character","character","character","character","character","character"),na.strings = "NA")
numdatacols <- ncol(data)-6
View(data)
##Add in spaces for medium codes to match NWIS
if(!(is.null(data$medium.code[which(nchar(data$medium.code) == 2)])))
{
data$medium.code[which(nchar(data$medium.code) == 2)] <- paste(data$medium.code[which(nchar(data$medium.code) == 2)]," ",sep="")
}else{}
View(data)
!(is.null(data$medium.code[which(nchar(data$medium.code) == 2)]))
data$medium.code[which(nchar(data$medium.code) == 2)]
data<-read.csv(labfile,header=TRUE,
colClasses = c("character","character","character","character","character","character"),na.strings = "NA")
numdatacols <- ncol(data)-6
data$medium.code[which(nchar(data$medium.code) == 2)]
nchar(data$medium.code) == 2
nchar(data$medium.code)
View(data)
###2014 FAs
dataUpload(qwsampletype = 1,
DSN= "NWISCO",
env.db = "01",
qa.db = "02",
pcodefile = "pcodefile.csv",
labfile = "2014_FA_labfile.csv",
qwresultname = "2014_FA_qwresult",
qwsamplename = "2014_FA_qwsample",
qwsample.begin.date = "2013-01-01",
qwsample.end.date = "2014-12-31",
censor=TRUE)
###2014 RAs
dataUpload(qwsampletype = 1,
DSN= "NWISCO",
env.db = "01",
qa.db = "02",
pcodefile = "pcodefile.csv",
labfile = "2014_RA_labfile.csv",
qwresultname = "2014_RA_qwresult",
qwsamplename = "2014_RA_qwsample",
qwsample.begin.date = "2013-01-01",
qwsample.end.date = "2014-12-31",
censor=TRUE)
###2014 FAs
dataUpload(qwsampletype = 1,
DSN= "NWISCO",
env.db = "01",
qa.db = "02",
pcodefile = "pcodefile.csv",
labfile = "2014_FA_labfile.csv",
qwresultname = "2014_FA_qwresult",
qwsamplename = "2014_FA_qwsample",
qwsample.begin.date = "2013-01-01",
qwsample.end.date = "2014-12-31",
censor=TRUE)
###2014 RAs
dataUpload(qwsampletype = 1,
DSN= "NWISCO",
env.db = "01",
qa.db = "02",
pcodefile = "pcodefile.csv",
labfile = "2014_RA_labfile.csv",
qwresultname = "2014_RA_qwresult",
qwsamplename = "2014_RA_qwsample",
qwsample.begin.date = "2013-01-01",
qwsample.end.date = "2014-12-31",
censor=TRUE)
